// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import domain "fance/app/tasks/domain"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, task
func (_m *Repository) Create(ctx context.Context, task *domain.Task) (*domain.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) *domain.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *domain.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, taskID
func (_m *Repository) Delete(ctx context.Context, taskID string) error {
	ret := _m.Called(ctx, taskID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, page, limit
func (_m *Repository) GetAll(ctx context.Context, page int, limit int) ([]domain.Task, error) {
	ret := _m.Called(ctx, page, limit)

	var r0 []domain.Task
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Task); ok {
		r0 = rf(ctx, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, page, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, task
func (_m *Repository) Update(ctx context.Context, task *domain.Task) error {
	ret := _m.Called(ctx, task)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
